<div class="py-4"></div>
<!-- Content -->
<div id="content" class="container-md">
    <%- cv.CVcode %>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
<script>
    window.onload = function () {
        chart();
        map();
        setBackground();
        //ensure the element cannot be editable
        document.querySelectorAll("[contenteditable]").forEach(field => {
            field.contentEditable = "false";
        });
    };
    //show chart after loading the page
    function chart() {
        var p;
        //for each canvas element (for storing chart)
        document.querySelectorAll('canvas').forEach(ctx => {
            //get the inputted data of the chart
            var presentChart = '.' + ctx.nextSibling.nextSibling.classList;
            var input = [];
            document.querySelectorAll(presentChart).forEach(ele => {
                input.push(ele.value)
            });
            var categoryArr = input[1].split(",");
            var category = [];
            for (p = 0; p < categoryArr.length; p++) {
                category.push(categoryArr[p])
            }

            var dataArr = input[3].split(",");
            var chartData = [];
            for (p = 0; p < dataArr.length; p++) {
                chartData.push(parseInt(dataArr[p], 10))
            }

            //if the type is donutchart/pie, need to use different colors istead just the theme color
            var o = Math.round, r = Math.random, s = 255;
            var color = document.getElementById('themeColor').style.color;
            var colorArr = [];
            for (p = 0; p < dataArr.length; p++) {
                if (input[0] != 'pie' && input[0] != 'doughnut') {
                    colorArr.push(color);
                } else {
                    colorArr.push('#' + Math.floor(Math.random() * 16777215).toString(16));
                }
            }

            //form chart
            new Chart(ctx, {
                type: input[0],
                data: {
                    labels: category,
                    datasets: [{
                        label: input[2],
                        data: chartData,
                        backgroundColor: colorArr
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    },
                    responsive: true,
                    responsiveAnimationDuration: 1000,
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: input[4]
                    }
                },
            });
        });
    }
    //////

    //////show map after loading the page
    function map() {
        document.querySelectorAll('.leaflet-container').forEach(map => {
            //get the present map's input's class
            var presentMap = '.' + map.nextSibling.nextSibling.nextSibling.classList;
            //get all the input data of that map
            var input = [];
            document.querySelectorAll(presentMap).forEach(ele => {
                input.push(ele.value)
            });

            //create new map
            var newMap = L.map(map.id).setView([input[0], input[1]], 18);
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 15,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1IjoibWFra2lraSIsImEiOiJja2xldXcwMmExbnpvMnVxZTAyZ2VkamR5In0.fyuBDRmXfmKoFeDmgU1cUA'
            }).addTo(newMap);

            //add marker
            var marker = L.marker([input[0], input[1]]).addTo(newMap);
            marker.bindPopup("<b>" + input[2] + "</b><br>" + Math.round(input[0] * 1000) / 1000 + ", " + Math.round(input[1] * 1000) / 1000 + "<br>" + input[3]).openPopup();
        })
    }
    //////

    ///////set webpage background color
    function setBackground() {
        background = document.getElementById("webpageColor").value;
        document.body.style.backgroundColor = 'rgb(248, 248, 248)';
        document.body.setAttribute("class", background);
    }
    ///////


    ////////for showing different content page when a meun button is clicked
    function showContent(targetPage) {
        var contentBtnArray = document.getElementsByClassName("content-btn");
        var i;
        for (i = 0; i < contentBtnArray.length; i++) {
            if (contentBtnArray[i].value == targetPage) {
                document.getElementById(targetPage).style.display = '';
            } else {
                id = contentBtnArray[i].value;
                document.getElementById(id).style.display = 'none';
            }
        }
    }
    ////////


    ////////show responsitive window if it exists and its btn is clicked
    document.querySelectorAll(".windowModalBtn").forEach(btn => {
        btn.addEventListener("click", showWindow);
    })

    function showWindow(event) {
        var modal = document.getElementById(event.target.value);
        if (modal.style.display == 'none') {
            modal.style.display = '';
        } else {
            modal.style.display = 'none';
        }
    }
    ////////
</script>