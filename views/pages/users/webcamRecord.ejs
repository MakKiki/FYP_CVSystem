<!-- <div class="py-5"></div>
<div class="left">
    <button type="button" id="startButton" class="button">
        Start
    </button>
    <h2>Preview</h2>
    <video id="preview" width="160" height="120" autoplay muted></video>
</div>

<div class="right">
    <button type="button" id="stopButton" class="button">
        Stop
    </button>
    <h2>Recording</h2>
    <video id="recording" width="160" height="120" controls></video>
    <a id="downloadButton" class="button">
        Download
    </a>
</div>

<div id="log"></div>

<script>
    let preview = document.getElementById("preview");
    let recording = document.getElementById("recording");
    let startButton = document.getElementById("startButton");
    let stopButton = document.getElementById("stopButton");
    let downloadButton = document.getElementById("downloadButton");
    let logElement = document.getElementById("log");

    let recordingTimeMS = 6000;

    function log(msg) {
        logElement.innerHTML += msg + "\n";
    }

    function wait(delayInMS) {
        return new Promise(resolve => setTimeout(resolve, delayInMS));
    }

    function startRecording(stream, lengthInMS) {
        let recorder = new MediaRecorder(stream);
        let data = [];

        recorder.ondataavailable = event => data.push(event.data);
        recorder.start();
        log(recorder.state + " for " + (lengthInMS / 1000) + " seconds...");

        let stopped = new Promise((resolve, reject) => {
            recorder.onstop = resolve;
            recorder.onerror = event => reject(event.name);
        });

        let recorded = wait(lengthInMS).then(
            () => recorder.state == "recording" && recorder.stop()
        );

        return Promise.all([
            stopped,
            recorded
        ])
            .then(() => data);
    }

    function stop(stream) {
        stream.getTracks().forEach(track => track.stop());
    }

    startButton.addEventListener("click", function () {
        navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        }).then(stream => {
            preview.srcObject = stream;
            downloadButton.href = stream;
            preview.captureStream = preview.captureStream || preview.mozCaptureStream;
            return new Promise(resolve => preview.onplaying = resolve);
        }).then(() => startRecording(preview.captureStream(), recordingTimeMS))
            .then(recordedChunks => {
                let recordedBlob = new Blob(recordedChunks, { type: "video/webm" });
                recording.src = URL.createObjectURL(recordedBlob);
                downloadButton.href = recording.src;
                downloadButton.download = "RecordedVideo.webm";

                log("Successfully recorded " + recordedBlob.size + " bytes of " +
                    recordedBlob.type + " media.");
            })
            .catch(log);
    }, false);

    stopButton.addEventListener("click", function () {
        stop(preview.srcObject);
    }, false);
</script> -->


<a class="btn back-btn" type="button" href='/create'>
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-box-arrow-left"
        viewBox="0 0 16 16">
        <path fill-rule="evenodd"
            d="M6 12.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v2a.5.5 0 0 1-1 0v-2A1.5 1.5 0 0 1 6.5 2h8A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-8A1.5 1.5 0 0 1 5 12.5v-2a.5.5 0 0 1 1 0v2z" />
        <path fill-rule="evenodd"
            d="M.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L1.707 7.5H10.5a.5.5 0 0 1 0 1H1.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z" />
    </svg>
    Back To The 3D Customize Page
</a>

<div class="container">
    <div class="py-4"></div>
    <div class="row text-center justify-content-center">
        <div class="col-sm-12">
            <h1 style='color: #a570a7'>üìΩÔ∏è Record Your Video From Your WebCam üìΩÔ∏è</h1>
            <div class="py-3"></div>
        </div>

        <div id="content" class="col-sm-12">
            <button id="configureBtn" type="button" class="btn pink-btn" style="width:180px; height: 50px;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                    class="bi bi-camera-video" viewBox="0 0 16 16">
                    <path fill-rule="evenodd"
                        d="M0 5a2 2 0 0 1 2-2h7.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 4.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 13H2a2 2 0 0 1-2-2V5zm11.5 5.175l3.5 1.556V4.269l-3.5 1.556v4.35zM2 4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h7.5a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H2z" />
                </svg><span class="ml-1">Open Webcam</span>
            </button>
            <button id="startBtn" type="button" class="btn btn-danger recordingBtn"
                style="display: none; width:180px; height: 50px;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-record2"
                    viewBox="0 0 16 16">
                    <path d="M8 12a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm0 1A5 5 0 1 0 8 3a5 5 0 0 0 0 10z" />
                    <path d="M10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z" />
                </svg>Start Recoding
            </button>
            <button id="stopBtn" type="button" class="btn btn-dark recordingBtn"
                style="display: none; width:180px; height: 50px;"><svg xmlns="http://www.w3.org/2000/svg" width="16"
                    height="16" fill="currentColor" class="bi bi-stop-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path
                        d="M5 6.5A1.5 1.5 0 0 1 6.5 5h3A1.5 1.5 0 0 1 11 6.5v3A1.5 1.5 0 0 1 9.5 11h-3A1.5 1.5 0 0 1 5 9.5v-3z" />
                </svg>
                Stop Recoding
            </button>
            <a id="downloadBtn" type="button" class="ml-3 btn purple-btn"
                style="display: none; width:180px; height: 50px;" download="" href="">
                <div style='padding: 0.2rem 0rem;'></div>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                    class="bi bi-file-earmark-arrow-down" viewBox="0 0 16 16">
                    <path
                        d="M8.5 6.5a.5.5 0 0 0-1 0v3.793L6.354 9.146a.5.5 0 1 0-.708.708l2 2a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0-.708-.708L8.5 10.293V6.5z" />
                    <path
                        d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z" />
                </svg>
                Download Video
            </a>
            <div class="py-1"></div>
        </div>

        <div class="col-sm-12">
            <video id="video" autoplay muted></video>
            <video id="preview" style="display: none" controls></video>
        </div>

    </div>
    <div class="py-3"></div>
</div>


<!-- open source js for record video from webcam -->
<script>
    const init = async () => {
        // inital value
        let blobs;
        let rec;
        let stream;
        let preferredDevice = 0;
        let devices = (await navigator.mediaDevices.enumerateDevices()).filter(device => device.kind == 'videoinput');

        let getStream = async () => {
            const videoConstraint = {
                width: 800,
                height: 500,
                deviceId: devices[preferredDevice % devices.length].deviceId
            };
            return await navigator.mediaDevices.getUserMedia(
                {
                    video: videoConstraint,
                    audio: true
                }
            );
        };

        //when configure btn is clicked
        configureBtn.onclick = async () => {
            preferredDevice++;
            stream = await getStream();
            video.srcObject = stream;
            blobs = [];

            video.style.display = '';
            preview.src = '';
            startBtn.style.display = '';
            preview.style.display = 'none';
            configureBtn.style.display = 'none';
            downloadBtn.style.display = 'none';

            rec = new MediaRecorder(stream, { mimeType: 'video/webm; codecs=vp9,opus' });
            rec.ondataavailable = (e) => blobs.push(e.data);
            rec.onstop = async () => {
                let blob = new Blob(blobs, { type: 'video/webm' });
                let data_url = window.URL.createObjectURL(blob);
                downloadBtn.href = data_url;
                preview.src = data_url;
            };
        };

        //when start recoding btn is clicked
        startBtn.onclick = () => {
            startBtn.style.display = 'none';
            stopBtn.style.display = '';
            rec.start();
        };

        //when stop btn is clicked
        stopBtn.onclick = () => {
            rec.stop();
            stream.getTracks().forEach(s => s.stop())
            video.srcObject = null
            stream = null;

            configureBtn.style.display = '';
            configureBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-counterclockwise" viewBox="0 0 16 16">  <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z"/> <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z"/><span class="ml-1">Re-Record</span></svg>';
            downloadBtn.style.display = '';
            preview.style.display = '';
            video.style.display = 'none';
            startBtn.style.display = 'none';
            stopBtn.style.display = 'none';
        };
    };

    window.addEventListener('load', init);
</script>